set -o xtrace

function executeWrappedHelm(){
  productNameFound="false"
  subCommand=($PARAMS)
  if [ ${#subCommand[@]} -eq 3 ]; then
    for k in $( jq '.["dep-in"].LogFileLocations | keys | .[]' $WORKSPACE/data-bucket/params.json); do
      productNameProps=$k
      echo $productNameProps
      productName="\"$(echo ${subCommand[1]})"\"
      if [[ $productNameProps = $productName ]]; then
        productNameFound="true"
      fi
    done
  fi
  echo $productNameFound
  if [[ $productNameFound = "true" ]]; then
    ~/temp/helm template "${@:2}" >> deployment_temp.yaml
    ~/temp/helm create proj_temp
    mv proj_temp $DEP_REPO
    rm $DEP_REPO/proj_temp/values.yaml
    touch $DEP_REPO/proj_temp/values.yaml
    rm -r $DEP_REPO/proj_temp/templates
    mkdir $DEP_REPO/proj_temp/templates
    mv deployment_temp.yaml $DEP_REPO/proj_temp/templates/deployment.yaml
    groovy $DEP_REPO/kubedeployment_editor.groovy "HELM" ${subCommand[1]} deployment_temp.yaml "${WORKSPACE}/data-bucket/params.json"  $DEP_REPO/proj_temp/templates/deployment.yaml
    rm $DEP_REPO/proj_temp/templates/deployment.yaml
    mv deployment_temp.yaml  $DEP_REPO/proj_temp/templates/deployment.yaml
    ~/temp/helm helm init
    ~/temp/helm helm install ${subCommand[1]} $DEP_REPO/proj_temp
  else
    executeNormalHelm $args
  fi
}

function executeNormalHelm(){
  ~/temp/helm helm init
  ~/temp/helm $@
}

function saveFlags(){
  PARAMS=""
  args=$@
  while (( "$#" )); do
    case "$1" in
      -f|--values)
        counter=0
        list=""
        for var in "${@:2}"
        do
            if [[ -f $var ]]; then
              list="$list $var"
              ((counter=counter+1))
            elif [[ $var = *.yaml ]] || [[ $var = *.yml ]]; then
              list="$list $var"
              ((counter=counter+1))
            fi
        done
        echo -e "$1 $list" >> flaglist.txt
        ((counter=counter+1))
        shift $counter
        ;;
      --) # end argument parsing
        shift
        break
        ;;
      -*|--*=|--*)
        FARG=$2
        if [[ $2 = -* ]] || [[ $2 = --* ]] || [[ $2 = --* ]] || [[ -z $2 ]];then
          echo -e "$1 isset" >> flaglist.txt
          shift 1
        else
          echo -e "$1 $FARG" >> flaglist.txt
          shift 2
        fi
        ;;
      *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
  done
  # set positional arguments in their proper place
  eval set -- "$PARAMS"
  echo -e "$PARAMS" >> flaglist.txt
}

SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DEP_REPO="$(dirname "$(dirname "$(readlink -fm "$0")")")"
WORKSPACE="$(dirname "$DEP_REPO")"

declare args="$@"
saveFlags $args
subCommand=($PARAMS)
if [ ${subCommand[1]} = install ]; then
  executeWrappedHelm $args
else
  executeNormalHelm $args
fi


#TODO 1. flags add to file getopts
#TODO 2. Identify runtime and build time params
#TODO 3. proper seperartion of params and arguments
#TODO 4. only apply change to things in helmLogLocations
#TODO 5. Edit deployment using kubernetes_editory_groovy